#!/usr/bin/env bash
#------------------------------------------
# stampede - Creates or invoked a "stampede"; a workflow process.
# The following options are supported:
#   stampede [-h|--help] [options] [create | [makefile] [targets]]
# Where,
#   -h | --help   Describe the available options.
#   create        Create a skeleton for a new stampede.
#   makefile      The makefile to drive the stampede (default: current directory's).
#   targets       Make targets to build (default: the first target).
#
# See the $STAMPEDE_HOME/README.md file for more information
# on Stampede.

if [ -z "$STAMPEDE_HOME" ]
then
  _sdir=$(dirname $0)
  [ "$_sdir" = '.' ] && _sdir=$PWD
  STAMPEDE_HOME=$(dirname $_sdir)
  [ "$STAMPEDE_HOME" = '.' ] && STAMPEDE_HOME=$PWD
fi
export STAMPEDE_HOME

function help {
  . $STAMPEDE_HOME/bin/common.sh
  cat <<-EOF
$0 - Creates or invoked a "stampede"; a workflow process.

Usage: [env ENV_VAR_DEFS] stampede [-h | --help] \ 
         [--year=YYYY] [--month=MM | --mon=MM] [--day=DD] \ 
         [--hour=HH] [--minute=MM | --min=MM] \ 
         [--second=SS | --sec=SS] [--epoch=seconds] \ 
         [--force-rerun] [--tries=N] [--between-tries=N] \ 
         [-v | --verbose[=N]] [-n | noexec] \ 
         [create | makefile [make_options] [targets]]

Where:
  -h | --help        Print this message and exit.
  ENV_VAR_DEFS       One-time overrides of env. vars defined in bin/env.sh.
  --year=YYYY        Use YYYY (4 digits!) as the year. All time-related values
                     default to the time the stampede starts. See note below.
  --month=MM | --mon=MM
                     Use MM (2 digits!) as the month.
  --day=DD           Use DD (2 digits!) as the day.
  --hour=HH          Use HH (2 digits!) as the hour.
  --minute=MM | --min=MM 
                     Use MM (2 digits!) as the minute.
  --second=SS | --sec=SS
                     Use SS (2 digits!) as the second.
  --epoch=seconds    Set ALL time fields to correspond to the specified seconds
                     since the Unix epoch. See note below.
  --force-rerun      Force a rerun, ignoring make's usual dependency checking.
  --tries=N          Make up to N attempts to succeed (default: $STAMPEDE_NUMBER_OF_TRIES
                     from STAMPEDE_NUMBER_OF_TRIES). For no limit, specify 0.
  --between-tries=N  How many seconds between tries to wait. If "N" ends with a
                     'h', 'm', or 's', then wait N hours, minutes, or seconds
                     (default: $STAMPEDE_DEFAULT_SLEEP_INTERVAL from STAMPEDE_DEFAULT_SLEEP_INTERVAL).
  --log-level=N      Log more verbose output (useful for debugging w/ -n).
                     SYSLOG log levels are used, so LARGER N results in LESS
                     verbose output (default: $STAMPEDE_LOG_LEVEL - ${STAMPEDE_LOG_LEVEL_NAMES[$STAMPEDE_LOG_LEVEL]} - from STAMPEDE_LOG_LEVEL).
                     For N, you can also use EMERGENCY, ALERT, CRITICAL, ERROR,
                     WARNING, NOTICE, INFO, and DEBUG (case doesn't matter). 
  -n | --noexec      Don't actually execute the commands in the script, 
                     just "echo" them.
  create             Create a new stampede workflow.
  makefile           Run "makefile", which defines the stampede 
                     (default: \$PWD/makefile).
  make_options       Pass these options to make.
  targets            Build these targets (default: first on in makefile).

NOTE on time-related arguments: The purpose of these arguments is to enable
specifying time-stamped resources, defaulting to those with the current date
and time. If you specify any of the time-related arguments, WITH THE EXCEPTION OF
"--epoch=seconds", it only affects that field. All other time-related fields that
aren't specified will default to the current start time. Instead, --epoch=seconds
changes ALL time fields to the corresponding time. In principle, you can mix 
--epoch=seconds with other time arguments; the latter will still override the 
corresponding equivalent field values from the epoch seconds, but this could be
very confusing.
EOF
}

# defaults:
command=make 
makefile=
makeopts=()
while [ $# -ne 0 ]
do
    case $1 in
        -h|--he*)
            help
            exit 0
            ;;
        --year=*)
            export YEAR=${1#--year=}
            ;;
        --mon*=*)
            export MONTH=${1#--mon*=}
            ;;
        --day=*)
            export DAY=${1#--day=}
            ;;
        --hour=*)
            export HOUR=${1#--hour=}
            ;;
        --min*=*)
            export MINUTE=${1#--min*=}
            ;;
        --sec*=*)
            export SECOND=${1#--sec*=}
            ;;
        --epoch=*)
            # Although it looks like we're just setting yet another time field,
            # like the others. In fact, this value is used to calculate all the
            # others if they aren't specified explicitly.
            export EPOCH_SECOND=${1#--epoch=}
            ;;
        --force-rerun)
            force_rerun="--always-make"
            ;;
        --tries=*)
            let STAMPEDE_NUMBER_OF_TRIES=${1#--tries=}
            export STAMPEDE_NUMBER_OF_TRIES
            ;;
        --between-tries=*)
            let STAMPEDE_DEFAULT_SLEEP_INTERVAL=$($STAMPEDE_HOME/bin/to-seconds ${1#--between-tries=})
            export STAMPEDE_DEFAULT_SLEEP_INTERVAL
            ;;
        --log-level=*)
            log_level=${1#--log-level=}
            ;;
        -n|--n*)
            noexec="--dry-run"
            NOOP=echo
            ;;
        -*)
            echo "Unrecognized option: $1" 1>&2
            echo "See stampede \"--help\" for more details." 1>&2
            exit 1
            ;;
        create)
            command=$1
            ;;
        *)
            if [ -z "$makefile" ]
            then
              makefile=$1
            else
              make_opts[${#make_opts[*]}]=$1
            fi
            ;;
    esac        
    shift
done

if [ "$command" = "create" ]
then
  if [ -n "$NOOP" ]
  then
    echo "exec $STAMPEDE_HOME/bin/create-project"
    exit 0
  else
    exec $STAMPEDE_HOME/bin/create-project
  fi
fi

# Not creating a new project, but running make on the existing one.

: ${makefile:=Makefile}  # if not explicitly set on the command line.
MAKEFILE=$(basename $makefile)
PROJECT_DIR=$(dirname $makefile)
makefile_dir=$PROJECT_DIR
if [ "$makefile_dir" = "." -o "$makefile_dir" = "$MAKEFILE" ] 
then
  makefile_dir=
else
  makefile_dir="--directory=$PROJECT_DIR"
fi
export MAKEFILE
export PROJECT_DIR

# Because we let the user change YEAR, MONTH, DAY, etc. we must include
# common.sh AFTER processing input options.

. $STAMPEDE_HOME/bin/common.sh

# After loading common.sh functions we need, validate and set the log level.
function determine_log_level {
  let level=$1
  case $1 in
    [0-9]*) 
      toss=$(to-log-level $1)  # Used only to catch invalid values.
      echo $1
      ;;
    *)
      from-log-level $1
      ;;
  esac
}

if [ -n "$log_level" ]
then
  let STAMPEDE_LOG_LEVEL=$(determine_log_level $log_level)
fi
tries_string=$STAMPEDE_NUMBER_OF_TRIES
[ $STAMPEDE_NUMBER_OF_TRIES -le 0 ] && tries_string="no limit"

if [ $STAMPEDE_LOG_LEVEL -le $(from-log-level info) ]
then
  info "Starting $0 $command (time: $STAMPEDE_START_TIME):"
  info "  makefile:                  $makefile_arg"
  info "  make options/targets:      $STAMPEDE_MAKE_OPTIONS ${make_opts[@]}"
  info "  log file:                  $(log-file)"
  info "  force rerun?               $(true-or-false $force_rerun "on" "off")"
  info "  maximum attempts:          $tries_string"
  info "  interval between attempts: $STAMPEDE_DEFAULT_SLEEP_INTERVAL"
  info "  verbosity:                 $(to-log-level $STAMPEDE_LOG_LEVEL)"
  info "  no execute mode?           $(true-or-false "$NOOP" "true" "false")"
  info " Environment variables:"
  info "    YEAR-MONTH-DAY:HOUR:MINUTE:SECOND:   $YEAR-$MONTH-$DAY:$HOUR:$MINUTE:$SECOND"
  info "    EPOCH_SECOND:                        $EPOCH_SECOND"
  env | grep '^STAMPEDE_' | while read line
  do
    str1=$(echo $line | sed -e 's/\([^=]\+\)=\(.*\)/\1:/')
    str2=$(echo $line | sed -e 's/\([^=]\+\)=\(.*\)/\2/')
    debug "    $(printf "%-30s\t%s" "$str1" "$str2")"
  done
fi
function keep_trying {
  let count=$1
  if [ $STAMPEDE_NUMBER_OF_TRIES -le 0 -o $count -lt $STAMPEDE_NUMBER_OF_TRIES ]
  then
    echo true
  else
    echo false
  fi
}

let count=0
while [ $(keep_trying $count) = true ]
do
  if [ $count -gt 0 ]
  then
    warning "Attempt #$count of $STAMPEDE_NUMBER_OF_TRIES failed!"
    waiting $count $STAMPEDE_DEFAULT_SLEEP_INTERVAL
  fi

  let count=$count+1
  notice running: make -f "$MAKEFILE" "$makefile_dir" "$STAMPEDE_MAKE_OPTIONS" $noexec $force_rerun "${make_opts[@]}"
  if [ -z "$NOOP" ]
  then
    make -ks -f "$MAKEFILE" "$makefile_dir" $STAMPEDE_MAKE_OPTIONS $noexec $force_rerun "${make_opts[@]}" 2>&1 | while read line
    do
      notice "  output: $line"
    done
  fi
  if [ $? -eq 0 ]
  then
    notice "Finished!"
    echo2 "Finished!"
    exit 0
  fi
done

die "Failed after $count attempts! Quitting..."
