#!/usr/bin/env bash
#----------------------------------
# dates - Mac/Linux date formatting and calculation tool.
# usage:  dates [--help] options
# This script wraps the different date tools on Mac and Linux.
# TODO: support Cygwin's version of date.

function help {
		cat <<EOF
usage: $0 [--help] [--verbose] \ 
  [--today | --date=date [--informat=fmt]] [--format=fmt] [--sep=separator] [M:N [units]]"
where:"
  --help          This message.
  --verbose       Echo the *nix date commands to stderr.
  --today         Use today's date as the starting date.
  --date=date     Use date as the starting date. Assumes RFC-3999 format unless you specify --informat.
  --informat=fmt  The format of the input --date=date. It's an error to also specify --today.
                  Defaults to RFC-3999 format. Specifying --informat=rfc-3999 is equivalent.
                  See the WARNING below about input formats on Linux.
                  Omit the "+" at the beginning of the string, which the date command would require.
  --format=fmt    Format the output date(s) using fmt. Specify --format=rfc-3999 for RFC-3999 output.
  --sep=separator Separate output dates by "separator" (default: " "). Use '\n' for one per line.
  M:N             Calculate one or more "units" (default unit: 1 day), based on this interpretation of M:N:
    M:N             Return a range of dates from M days to N days FROM the starting date. 
                    Prefix M or N with a "-" to use days AGO. 
    :N            Start with the starting date, inclusive, i.e., M=0.
    M:            End with the starting date, inclusive, i.e., N=0.
                  Because the M and N are inclusive, the number of dates returned is abs(N-M)+1.
                  Also, if the N < M, the results "count down".
  units           How to interpret the the M:N range. An optional number (default: 1),
                  followed by one of the characters in ymwdHMS.
  If "M:N units" are omitted, the script just reformats the input or today's date.
See also the tests of this script in test/test-dates.sh for examples.
See also "man date" for more information about the *nix date command format options.
WARNING: The Linux date command often fails to return valid results when doing arithmetic
on an input date that is not RFC-3999 format! There are exceptions, such as using the %Y-%m-%d
format when calculating day deltas. We recommend using RFC-3999 for this reason.
EOF
}

function die {
	echo "$0: $@"
	echo "See $0 --help"
	kill -ABRT $$
}

separator=" "
date_range="0:0"
let delta=1
units="d"
# Default input and output formats of the *nix date command (RFC-3999).
# This works much better with the linux date command!!
RFC_3999="%a %b %d %T %Z %Y"
in_format="$RFC_3999"
out_format="$RFC_3999"
let verbose=1
let disallow_in_format=0
let both_date_and_in_format=0
while [ $# -ne 0 ]
do
	case $1 in 
		-h|--help)
			help
			exit 0
			;;
		--verbose)
			let verbose=0
			;;
		--today)
			start_date=$(date +"$RFC_3999")
			in_format="$RFC_3999"
			let disallow_in_format=$disallow_in_format+1
			;;
		--date=*)
			let both_date_and_in_format=$both_date_and_in_format+1
			start_date=${1#--date=}
			;;
		--informat=*)
			let both_date_and_in_format=$both_date_and_in_format+1
			let disallow_in_format=$disallow_in_format+1
			in_format=${1#--informat=}
			[ -n "$in_format" ] || die "The input format can't be empty!"
			[ "$in_format" = 'rfc-3999' ] && in_format="$RFC_3999"
			;;
		--format=*)
			out_format=${1#--format=}
			[ -n "$out_format" ] || die "The output format can't be empty!"
			[ "$out_format" = 'rfc-3999' ] && out_format="$RFC_3999"
			;;
		--sep*)
			separator=${1#--sep*=}
			;;
		*:*)
			date_range=$1
			;;
		0*|1*|2*|3*|4*|5*|6*|7*|8*|9*)
			let delta=$1
			;;
		y|m|w|d|H|M|S)
			units=$1
			;;
		*)
			die "unrecongized argument: $1"
			;;
	esac
	shift
done

[ $disallow_in_format -gt 1 ] && die "Can't specify --informat with --today!"

case $date_range in
	*:*)  ;;
	*)
		die "Must specify M:N, for the range of dates to return."
		;;
esac


function mac_date {
	start_date=$1
	delta=$2
	units=$3
	in_format=$4
	out_format=$5

	[ -n "$out_format" ] && out_format="+$out_format"
	[ $verbose -eq 0 ] && echo date -j -v${delta}${units} -f \"$in_format\" \"$start_date\" \"$out_format\" 1>&2
	date -j -v${delta}${units} -f "$in_format" "$start_date" "$out_format"
}

function linux_date {
	start_date=$1
	delta=$2
	units=$3
	in_format=$4
	out_format=$5

	case $delta in
		-*)
			delta="- ${$delta#-}"
			;;
		+*)
			delta="+ ${$delta#+}"
			;;
		*)
			delta="+ $delta3"
			;;
	esac

	case $units in
		y) units="year ago"   ;;
		m) units="month ago"  ;;
		d) units="day ago"    ;;
		H) units="hour ago"   ;;
		M) units="minute ago" ;;
		S) units="second ago" ;;
	esac

	[ -n "$out_format" ] && out_format="+$out_format"
	[ $verbose -eq 0 ] && echo date --date=\"$start_date $delta $units\" \"$out_format\" 1>&2
	date --date="$start_date $delta $units" "$out_format"
}

# Determine which date command we're using.
# TODO: Cygwin??
function mac_or_linux_date {
	case $(uname) in
		Darwin)
			mac_date "$@"
			;;
		*)
			linux_date "$@"
			;;
	esac				
}


start=${date_range%:*}
end=${date_range#*:}
test -n "$start" || start=0
test -n "$end"   || end=0

# To avoid having a leading or trailing separator, which causes problems when 
# assigning the output to variables, we prepend the separator, but use "" the 
# first time through the loop. (hack...)
sep=
for delta2 in $(eval "echo {$start..$end}")
do 
	let delta3=$delta2*$delta
	case $delta3 in
		-*)
			;;
		*)
			delta3="+$delta3"
			;;
	esac
	printf "$sep%s" "$(mac_or_linux_date "$start_date" "$delta3" $units "$in_format" "$out_format")"
	sep=$separator
done
echo ""
